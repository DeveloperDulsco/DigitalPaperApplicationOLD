@model DigiDoc.Models.Ereg.TempReservation
@{
    var childadultcount = Model.AdultCount + "/" + Model.ChildCount;
}
<div class="container-fluid px-4 pt-4" style="
    margin-top: 165px;
">
    <div class="content-wrap">
        <form method="post" id="frmRegCard">
            @Html.HiddenFor(m => m.TempReservationID)
            @Html.HiddenFor(m => m.DocumentType)
            <div class="row">
                <div class="">
                    @if (!string.IsNullOrEmpty(ViewBag.Message))
                    {
                        <div class="alert alert-danger" role="alert">
                            @(ViewBag.Message)
                        </div>


                    }
                    @*<form method="post" action="@Url.Action("GetRegistration","DigiDocMobile")" id="frmRegcard">*@


                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Email  Address <span class="error">*</span></label>
                            @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control", type = "email", @title = "title", @placeholder = "placeholder", @Id = "EmailAddress" })
                            @*<input type="email" class="form-control" value="@primaryProfile.Email" id="email" name="Profile[0].Email">*@

                        </div>
                        <div class="form-group col-md-4">
                            <label>Phone Number <span class="error">*</span></label>
                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", type = "number", @title = "title", @placeholder = "placeholder", @Id = "Phone" })
                            @*<input type="number" class="form-control" id="phone" name="Profile[0].Phone" value="@primaryProfile.Phone">*@
                        </div>
                        <div class="form-group col-md-4">
                            <label>Address <span class="error">*</span></label>
                            @Html.TextBoxFor(model => model.AddressLine1, new { @class = "form-control", @title = "title", @placeholder = "placeholder", @Id = "AddressLine1" })
                            @*<input type="text" class="form-control" id="address" name="Profile[0].AddressLine1" value="@primaryProfile.AddressLine1">*@
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Postal Code  <span class="error">*</span></label>
                            @Html.TextBoxFor(model => model.PostalCode, new { @class = "form-control", value = "1212", @title = "title", @placeholder = "placeholder", @Id = "PostalCode" })
                            @*<input type="text" class="form-control" id="postalcode" name="postalcode" value="@primaryProfile.PostalCode">*@
                        </div>

                    </div>

                    <div class="row">
                        <div class="form-group col-md-4">
                            <label>Country  <span class="error">*</span></label>
                            @Html.DropDownListFor(model => model.CountryMasterID, (SelectList)ViewBag.CountryList, "Select Country", new { @class = "form-control selectpicker selectCountry", @data_live_search = "true", @title = "title", @Id = "CountryMasterID" })

                        </div>
                        <div class="form-group col-md-4">
                            <label>State  <span class="error"></span></label>
                            @Html.DropDownListFor(model => model.StateMasterID, (SelectList)ViewBag.StateList, "Select State", new { @class = "form-control selectpicker state", @data_live_search = "true", @title = "title", @Id = "StateMasterID" })

                        </div>
                        <div class="form-group col-md-4">
                            <label>City  <span class="error">*</span></label>
                            @Html.TextBoxFor(model => model.City, new { @class = "form-control", @title = "title", @placeholder = "placeholder", @Id = "City" })
                        </div>

                    </div>

                    <div class="detail-wrapper">
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>Confirmation Number</label>
                                @Html.LabelFor(model => model.ReservationNumber, Model.ReservationNumber, new { @class = "form-control" })

                            </div>
                            <div class="form-group col-md-4">
                                <label>Room Type</label>
                                @Html.LabelFor(model => model.RoomType, Model.RoomType, new { @class = "form-control" })

                            </div>
                            <div class="form-group col-md-4">
                                <label>Adult/Child</label>
                                @Html.Label(@childadultcount, new { @class = "form-control" })

                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-4">
                                <label>
                                    Check-In-Date
                                </label>
                                @Html.LabelFor(model => model.ArrivalDate, Model.ArrivalDate.Value.ToString("dd/MM/yyyy"), new { @class = "form-control" })

                            </div>
                            <div class="form-group col-md-4">
                                <label>
                                    Check-Out-Date
                                </label>
                                @Html.LabelFor(model => model.DepartureDate, Model.DepartureDate.Value.ToString("dd/MM/yyyy"), new { @class = "form-control" })

                            </div>
                            <div class="form-group col-md-4">
                                <label>
                                    Breakfast
                                </label>
                                <span>@(Model.IsBreakFastAvailable ? "Included" : "Not Included")</span>

                            </div>
                        </div>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="IsTermsAndConditionAccepted" name="IsTermsAndConditionAccepted" value="True">
                        <label class="form-check-label" for="acceptTermsAndCondition">
                            I agree to the <a href="#" data-toggle="modal" data-target="#termsAndConditionModal">terms and conditions</a>
                        </label>
                    </div>
                    <div class="row">
                        <div class="col-md-6 col-lg-6 col-xl-3">
                            <div class="button-wrapper1 d-flex justify-content-between">
                                <input onclick="approve()" class="btn btn-secondary m-0" type="button" name="Approve" id="approvelButon" value="Approve" />
                                <input onclick="reject()" class="btn btn-primary mr-0" type="submit" name="Reject" id="rejectButon" value="Reject">
                            </div>
                        </div>
                    </div>
                    @*</form>*@
                </div>
            </div>

        </form>
        <div id="signbx" class="sign">
            <form name="documentSignatureForm" id="documentSignatureForm" method="post" action="@Url.Action(" #")">
                @Html.AntiForgeryToken()
                <div id="signature-pad" class="signature-pad">

                    <div class="signature-pad--body">
                        <canvas height=auto></canvas>
                    </div>
                    <div class="signature-pad--footer">
                        @Html.HiddenFor(model => model.DocumentType)
                        @Html.HiddenFor(model => model.TempReservationID)

                        <div class="signature-pad--actions">

                            <div class="buttons">
                                <button type="button" class="button clear" data-action="clear">Clear</button>

                                <input type="button" id="btnsignatureconfirm" value="Save" class="button save" />

                            </div>

                            <div class="description">Sign above</div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        @*<div id="cover">
        </div>*@
    </div>
</div>

<div class="modal fade cstm-modal" id="termsAndConditionModal" tabindex="-1" role="dialog" aria-labelledby="termsAndConditionModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered privacy-model" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="termsAndConditionModalLabel">Terms and Conditions </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="close_icon"></span>
                </button>
            </div>
            <div class="modal-body">
                <p>1.	 I hereby agree to be jointly and severally liable with the person, company or association as may be indicated on this registration card, for all charges incurred on all accounts which I may now or hereafter maintain with the hotel.  I authorize the hotel to charge to my credit card if I choose not to check out at the front desk.</p>
                <p>2.	A cleaning fee of $275nett per incident will be charged to a guest smoking in the room and/or within the hotel common areas.</p>
                <p>3.	Also, please be informed that should you be diagnosed with or test positive for COVID-19 while in residence at the hotel, a cleaning fee of $150+7% GST will be charged for the necessary disinfection of the room.</p>
                <p>4.	A complimentary safe deposit box is available in the room for the safe keeping of your valuables.  I acknowledge that liability of the hotel is covered by the innkeeper’s Act.</p>
                <p>5.	I acknowledge the terms of the Customer Personal Data Protection Charter at http://www.accorhotels.com/security-certificate/index.en.shtml</p>
                <p>6.	All hotel guests are required to present their passport and/or personal identification document in accordance to Section 27(1) and Section 28(1) of the Hotels Licensing Regulations.  By completing this digital check-in, I authorize the hotel to forward the details of my passport and/or personal identification document to the local authorities/government agencies in order to verify that I am in the country legally.</p>
                <div class="mt-4 text-center">
                    <button class="btnstyle blue" data-dismiss="modal" aria-label="Close">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal model-cstm fade" id="SignatureModal" aria-hidden="true" aria-labelledby="signatureModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div id="signbx" class="sign">
                <form name="documentSignatureForm" id="documentSignatureForm" method="post" action="@Url.Action(" #")">

                    <div id="signature-pad" class="signature-pad">

                        <div class="signature-pad--body">
                            <canvas height="auto"></canvas>
                        </div>
                        <div class="signature-pad--footer">

                            <div class="signature-pad--actions">

                                <div class="buttons">
                                    <button type="button" class="button clear" data-action="clear">Clear</button>

                                    <input type="button" id="btnsignatureconfirm" value="Save" class="button save" />
                                </div>

                                <div class="description">Sign above</div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>




<script src="~/Assets/js/signature_pad.umd.js"></script>
<script src="~/Assets/js/app.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        notfication('@Model.ClientConnection','101');
    });
    function approve() {
                   var terms = $('#IsTermsAndConditionAccepted').is(':checked')

        if (terms) {
            $("#signbx").toggleClass("signshow");
        }
        else {

            alert("Accept Terms and conditions");
        }
    }
 //var signaturePad = null;
 //       function approves() {
 //           var terms = $('#IsTermsAndConditionAccepted').is(':checked')

 //           if (terms) {

 //               $("#SignatureModal").modal("show");
 //               var wrapper = document.getElementById("signature-pad");
 //               var clearButton = wrapper.querySelector("[data-action=clear]");
 //               var changeColorButton = wrapper.querySelector("[data-action=change-color]");
 //               var undoButton = wrapper.querySelector("[data-action=undo]");
 //               var savePNGButton = wrapper.querySelector("[data-action=save-png]");
 //               var saveJPGButton = wrapper.querySelector("[data-action=save-jpg]");
 //               var saveSVGButton = wrapper.querySelector("[data-action=save-svg]");
 //               var canvas = wrapper.querySelector("canvas");
 //               signaturePad  = new SignaturePad(canvas, {
 //                   // It's Necessary to use an opaque color when saving image as JPEG;
 //                   // this option can be omitted if only saving as PNG or SVG
 //                   backgroundColor: 'rgb(255, 255, 255)'
 //               });
 //           }
 //           else {
 //               alert("Accept Terms and conditions");
 //           }

 //       }
 //   $('#SignatureModal').on('hidden.bs.modal', function (e) {
 //       signaturePad.clear();
 //   });
 //   $(document).on('click', '#SignatureModal .clear', function () {
 //       signaturePad.clear();
 //   });
       function reject() {

                    var token = $('input[name="__RequestVerificationToken"]').val();




                     $.ajax({
                                url: "@Url.Action("RejectReservation", "DigidocMobile")",
                                type: "POST",
                         data: {
                             __RequestVerificationToken: token,
                             Id: $('#TempReservationID').val()
                         },
                                success: function (data) {

                                    if (data.Result) {

                                         notfication('@Model.ClientConnection','102');
                                        window.location.reload();
                                    }
                                    else {

                                    }
                                },
                                error: function (ex) {

                                }
                            })
        }

    $("#btnsignatureconfirm").on("click", function () {
        var token = $('input[name="__RequestVerificationToken"]').val();
        var email = $("#EmailAddress").val().toString();

                if (signaturePad.isEmpty()) {

                    alert("signature required")
                }
                else {
                    var dataURL = signaturePad.toDataURL();
                    var strImage = dataURL.replace(/^data:image\/[a-z]+;base64,/, "");

                    //var formData = new FormData($("#frmFolioCard").get(0));

                    //formData.append("Base64Signature", strImage);
                    ////formData.append("__RequestVerificationToken", $('input[name="__RequestVerificationToken"]').val());
                    //data: {
                    //    /* EmailAddress: $("#EmailAddress").val(),*/
                    //    //Phone: $("#Phone").val(),
                    //    //AddressLine1: $("#AddressLine1").val(),
                    //    //PostalCode: $("#PostalCode").val(),
                    //    //CountryMasterID: $("#CountryMasterID").val(),
                    //    //StateMasterID: $("#StateMasterID").val(),
                    //    //City: $("#City").val(),
                    //    __RequestVerificationToken: token,
                    //        Base64Signature: strImage,
                    //            TempReservationID: $("#TempReservationID").val(),
                    //                DocumentType: $("#DocumentType").val(),

                    //     },
                     $.ajax({
                         url: "@Url.Action("SaveDocumentSignatures", "DigidocMobile")",
                         cache: false,
                         type: "POST",

                         data: {
                             __RequestVerificationToken: token,
                             Base64Signature: strImage,
                             TempReservationID: $("#TempReservationID").val(),
                             DocumentType: $("#DocumentType").val(),
                            EmailAddress: $("#EmailAddress").val(),
                        Phone: $("#Phone").val(),
                        AddressLine1: $("#AddressLine1").val(),
                        PostalCode: $("#PostalCode").val(),
                        CountryMasterID: $("#CountryMasterID").val(),
                        StateMasterID: $("#StateMasterID").val(),
                        City: $("#City").val(),
                         },
                         dataType: 'json',
                                success: function (data) {

                                    if (data.Result) {
                                        CallServer(data.ClientConnection, data.TempId, data.DocumentId);
                                       // a();

                                        var appid = getParameterByName('AppId');

                                        if (appid != null) {
                                            window.location = "/DigidocMobile/SliderIndex?AppId=" + appid;
                                        }
                                        else {
                                            location.reload();
                                        }
                                    }
                                    else {

                                    }
                                },
                                error: function (ex) {

                                }
                            })
                }
            });
                function getParameterByName(name, url = window.location.href) {
                    name = name.replace(/[\[\]]/g, '\\$&');
                    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                        results = regex.exec(url);
                    if (!results) return null;
                    if (!results[2]) return '';
                    return decodeURIComponent(results[2].replace(/\+/g, ' '));
                }
</script>
