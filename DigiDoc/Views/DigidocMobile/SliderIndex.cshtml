@model IEnumerable<DigiDoc.Models.Ereg.SliderImage>

@{
    ViewBag.Title = "SliderIndex";
    Layout = "~/Views/Shared/DigiDocMobileLayout.cshtml";
    var s = 0;

    string isAssigned = ViewBag.IsAssigned;
    var DefaultTime = ViewBag.DefaultTime;
    var url = Request.Url;
    var baseurl = url.GetLeftPart(UriPartial.Authority);
    var apiUrl = baseurl + "/signalr/Hubs";
    var chatUrl = baseurl + "/";
    var supportedExtensions = "*.jpg,*.gif,*.png,*.bmp,*.jpe,*.jpeg,*.jfif";
    var reinitialize = ViewBag.LoadTime;
    var IsPageReload = ViewBag.IsPageReload;
    var successval = ViewBag.success==null?false: ViewBag.success.ToString().ToLower();


}

<div id="carouselExampleInterval" class="carousel" data-ride="carousel">
    <div class="carousel-inner">
        @foreach (var imgPath in Directory.GetFiles(Server.MapPath("~/SliderImages"), "*.*"))
        {

            var img = new FileInfo(imgPath);
            @*<img src="@Url.Content(String.Format("~/SliderImages/{0}", img.Name))" />*@
            s++;

            if (s == 0)
            {
                <div class="carousel-item active">
                    <img src="@Url.Content(String.Format("~/SliderImages/{0}", img.Name))" class="d-block w-100">
                </div>
            }
            else
            {
                <div class="carousel-item">
                    <img src="@Url.Content(String.Format("~/SliderImages/{0}", img.Name))" class="d-block w-100">
                </div>
            }
        }
      

    </div>
    <a class="carousel-control-prev" data-target="#carouselExampleInterval" data-slide="prev">
        <span class="carousel-control-prev-icon"></span>
    </a>
    <a class="carousel-control-next" data-target="#carouselExampleInterval" data-slide="next">
        <span class="carousel-control-next-icon"></span>
    </a>
  
</div>

<div class="container-fluid header p-0" id="divheader" style="display:none">
    <div class="container">
        <div class="row d-flex align-items-center justify-content-center">
            <div class="col-auto">
                <div class="logo">
                    <img src="~/EregAssets/images/logo.svg">
                </div>
            </div>

        </div>
    </div>
</div>
<div class="layout" id="divlayout" style="display:none">
    <div class="container">
       
        <div class="bg-main">
            <div class="content">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()


                    <div id="divpartial">

                    </div>


                }
                @Html.Hidden("hdnisassigned")
            </div>
        </div>
    </div>
</div>

<div class="modal fade cstm-modal" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" style="display: none;" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered privacy-model" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Terms and Conditions </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="close_icon"></span>
                </button>
            </div>
            <div class="modal-body">
                <p> The hotel may terminate the accommodation agreement in the following cases</p>
                <p>
                    When the guest is deemed likely to break the law, disrupt public order, or act contrary to public morals, or has engaged in such acts, during their stay.
                    When the guest is deemed to fall under any of the following categories（a) to（c):
                    a. An organized crime group or a member, associate member, or affiliate of an organized crime group or any other antisocial force
                    b. When the applicant is involved in corporations or other organizations whose operations are controlled by an organized crime group.
                    c. When any of the directors of the applicant’s corporation is classified as a member of an organized crime group
                </p>
                <p>
                    When the guest’s behavior poses a significant nuisance to other guests.
                    When the guest clearly has a contagious disease.
                </p>
                <p>
                    When the guest uses violence, threats, blackmail, or intimidation to make unjust or unreasonable demands against the hotel or its employees, or is deemed to have engaged in any similar acts in the past.
                    When the guest cannot be accommodated due to force majeure.
                    When the guest is intoxicated, exhibits or has exhibited extremely abnormal behavior that may pose a nuisance to other guests, or in cases that fall under the provisions of prefectural ordinances.
                    When the guest smokes in bed, messes with firefighting equipment, or otherwise violates the Hotel Rules and Regulations（limited to fire-related regulations）.
                    When the guest conceals the fact that they have reserved a guestroom within the hotel for the purpose of making a profit, either for themselves or for a third party, by selling goods, etc.
                </p>
                <p>
                    Please note that each hotel room is entitled to only park one car at the hotel carpark.
                </p>
                <div class="mt-4 text-center">
                    <button class="btnstyle" data-dismiss="modal" aria-label="Close">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade cstm-modal" id="Notify" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" style="display: none;" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered privacy-model" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Notification </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="close_icon"></span>
                </button>
            </div>

            <div class="modal-body">
                <div class="alert alert-warning" role="alert" id="NotifyDiv">
                </div>
                <div class="button-wrap">
                    <button class="btnstyle" data-dismiss="modal" aria-label="Close">OK</button>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="modal fade cstm-modal" id="SuccesNotify" tabindex="-1" role="dialog" aria-labelledby="SuccessModalLabel" style="display: none;" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered privacy-model" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Success </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="close_icon"></span>
                </button>
            </div>

            <div class="modal-body">
                <div class="alert alert-warning" role="alert" id="SuccessDiv">
                   Success! Your Registration Saved.
                </div>
                @*<div class="button-wrap">
                    <button class="btnstyle" data-dismiss="modal" aria-label="Close">OK</button>
                </div>*@
            </div>

        </div>
    </div>
</div>
<div class="modal fade cstm-modal show" id="exampleModal1" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" style="display: none; padding-right: 17px;">
    <div class="modal-dialog modal-md  modal-dialog-centered privacy-model" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Member Tier Benefits</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="close_icon"></span>
                </button>
            </div>
            <div class="modal-body">
                <div class="image-co"><img class="img-fluid" src="~/EregAssets/images/benifits.jpeg"></div>
                <div class="mt-4 text-center">
                    <button class="btnstyle" data-dismiss="modal" aria-label="Close">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script src="~/EregAssets/js/signature_pad.umd.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="@apiUrl"></script>
    <script type="text/javascript">
        @*if (@successval) {
            $("#SuccesNotify").modal('show');
            setTimeout(function () {
                $("#SuccesNotify").modal('hide');
            }, 5000);
        }*@
        var myCarousel = document.querySelector("#carouselExampleInterval")
        var carousel = new bootstrap.Carousel(myCarousel, {
            interval: 2000
        })
        $("#hdnisassigned").val('@isAssigned');
        $("#loadingModal").css("display", "none");
        var SignalrConnection;
        var ChatProxy;
        var initial;
            var ChatServerUrl = "@chatUrl";
            var ChatUrl = ChatServerUrl + "signalr"
        $(function () {

            initial = window.setInterval(
                function () {
                    if ($('#carouselExampleInterval').is(':hidden')) {

                    }
                    else {

                        if (@IsPageReload == true) {
                           
                            window.location.reload();

                        }
                        else {
                            Connect(true)
                        }
                    }

                }, 60000 * @reinitialize);
           Connect();
            SignalrConnection.disconnected(function () {

                setTimeout(function () {
                    var appid = getParameterByName('AppId');

                    if (appid != null) {


                        SignalrConnection.qs = { 'username': appid, 'WriteLog': false };
                       
                        SignalrConnection.start({ jsonp: true }).done(function () {


                        })


                            .fail(function () {
                            })

                    }
                    else {
                       /* alert("Device Identifier cannot be blank")*/
                    }
                }, 100);
            });


        });
        function CloseApp() {

            $.ajax({
                url: "@Url.Action("RejectReservation", "DigidocMobile")",
                type: "POST",
                data: {

                    Id: $("#TempReservationID").val()
                },
                success: function (data) {

                    var appid = getParameterByName('AppId');
                    notfication($("#ClientConnection").val(), '108');
                    if (appid != null) {

                        window.location = "/DigidocMobile/SliderIndex?AppId=" + appid;

                    }
                },
                error: function (error) {

                }
            });
        }
        function Connect(writelog = false) {

            SignalrConnection = $.hubConnection(ChatUrl, {
                useDefaultPath: false
            });
          
            ChatProxy = SignalrConnection.createHubProxy('DigiDocHub');
            ChatProxy.on("CancelOpera", function (DocumentId, ClientId) {

                var appid = getParameterByName('AppId');

                if (appid != null) {
                     $.ajax({
                url: "@Url.Action("RejectReservation", "DigidocMobile")",
                type: "POST",
                data: {

                    Id: $("#TempReservationID").val()
                },
                         success: function (data) {
                },
                error: function (error) {

                }
            });
                    window.location.reload();
                }
            });
            ChatProxy.on("MessageToApp", function (DocumentId, ClientId) {

                if ($('#carouselExampleInterval').is(':hidden')) {

                    notfication(ClientId, '109');
                }
                else {


                    var token = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: "@Url.Action("GetView", "DigidocMobile")",
                        type: "GET",
                        data: {

                            Id: DocumentId
                        },
                        success: function (data) {
                            $('#divlayout').show();
                            $('#divheader').show();
                            $('#divpartial').html(data);
                            $("#hdnisassigned").val(1);
                            $("#carouselExampleInterval").hide();


                            setTimeout(CloseApp, @DefaultTime);
                        },
                        error: function (error) {

                        }
                    });
                    clearInterval(initial)
                    initial = window.setInterval(
                        function () {
                            if ($('#carouselExampleInterval').is(':hidden')) {

                            }
                            else {

                                if (@IsPageReload == true) {
                                 
                                    window.location.reload();
                                }
                                else {
                                    Connect(true)
                                }
                            }

                        }, 60000 * @reinitialize);
                }
            });
            var appid = getParameterByName('AppId');

            if (appid != null) {

                //connecting the client to the signalr hub
                SignalrConnection.qs = { 'username': appid, 'IsAssinged': $("#hdnisassigned").val(), 'WriteLog': writelog};
            }
            SignalrConnection.start({ jsonp: true }).done(function () {
                //alert('username= ' + appid +'ChatUrl= '+ChatUrl)
                //alert("Connected to Signalr Server");

            })
                .fail(function () {
                 /* alert("failed in connecting to the signalr server");*/
                })


        }
        function notfication(name, status) {
            var appid = getParameterByName('AppId');
            ChatProxy.invoke("Notification", name, status, appid)
     }

        function Folionotfication(name, status, TempId) {
            var appid = getParameterByName('AppId');
            ChatProxy.invoke("FolioNotification", name, status, appid, TempId)
     }
        function CallServer(s,d,e) {
            ChatProxy.invoke('CallOpera',s,d,e);
        }
        var $item = $('.carousel-item');
        var $wHeight = $(window).height();
        $item.eq(0).addClass('active');
        $item.height($wHeight);
        $item.addClass('full-screen');
        $('.carousel img').each(function () {
            var $src = $(this).attr('src');
            var $color = $(this).attr('data-color');
            $(this).parent().css({
                'background-image': 'url(' + $src + ')',
                'background-color': $color
            });
            $(this).remove();
        });
        $(window).on('resize', function () {
            $wHeight = $(window).height();
            $item.height($wHeight);
        });
        function getParameterByName(name, url = window.location.href) {
            console.log(url);
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            console.log(decodeURIComponent(results[2].replace(/\+/g, ' ')));
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
            }
    </script>


}

